#include "general.h"

/*
 * 用dp[i][j][k]表示前i个字符串,使用j个0,k个1最多能选择的个数
 * 为了保证不重复使用,所以字符串要在最外面的循环, 且这样会让dp少一维数据
 * 并且j和k从大到小循环保证不重复计数
 */
int main()
{
    vector<string> strs = {};
    int m = 30, n = 30;

    vector<vector<int> > dp(m + 1, vector<int>(n + 1));
    int one, zero;
    int size = strs.size();
    for(int i = 1; i <= size; ++i){
        one = 0;
        zero = 0;
        for(char c: strs[i - 1]){
            if (c == '0')
                zero++;
            else
                one++;
        }

        for(int j = m; j >= 0; --j){
            for(int k = n; k >= 0; --k){
                if (j >= zero && k >= one)
                    dp[j][k] = std::max(dp[j][k], dp[j - zero][k - one] + 1);
            }
        }
    }

    cout << dp[m][n];
}
